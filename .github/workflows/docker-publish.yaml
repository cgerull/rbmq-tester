name: Build and publish
on:
  # push:
  #   # Publish `master` as Docker `latest` image.
  #   branches:
  #     - 'master'
  # Publish `master` as `latest` tag.
  pull_request:
    branches:
      - master
  # Publish release as versioned tags
  release:
    types: [published]

jobs:
   # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile
          fi
          
  deploy:
    needs: test
    runs-on: ubuntu-latest
    # if: github.event_name == 'pull_request'
    env:
      # TODO: Change variable to your image's name.
      IMAGE_NAME: "cgerull/rbmq-tester"
      TAG: "latest"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_SECRET }}
      - name: Set image name and version
        run: |
          # Define tag name
          VER=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          if [[ ${VER} =~ [0-9].* ]]; then                          
            TAG=${VER}
          else
            TAG=latest
          fi
          IMAGE="${{ env.IMAGE_NAME }}:${TAG}"
          echo "Building and pushing:  $IMAGE"
          # Save between steps
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ env.IMAGE }}